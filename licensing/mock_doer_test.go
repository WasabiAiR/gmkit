// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package licensing

import (
	"net/http"
	"sync"
)

var (
	lockDoerMockDo sync.RWMutex
)

// Ensure, that DoerMock does implement Doer.
// If this is not the case, regenerate this file with moq.
var _ Doer = &DoerMock{}

// DoerMock is a mock implementation of Doer.
//
//	    func TestSomethingThatUsesDoer(t *testing.T) {
//
//	        // make and configure a mocked Doer
//	        mockedDoer := &DoerMock{
//	            DoFunc: func(in1 *http.Request) (*http.Response, error) {
//		               panic("mock out the Do method")
//	            },
//	        }
//
//	        // use mockedDoer in code that requires Doer
//	        // and then make assertions.
//
//	    }
type DoerMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(in1 *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// In1 is the in1 argument value.
			In1 *http.Request
		}
	}
}

// Do calls DoFunc.
func (mock *DoerMock) Do(in1 *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("DoerMock.DoFunc: method is nil but Doer.Do was just called")
	}
	callInfo := struct {
		In1 *http.Request
	}{
		In1: in1,
	}
	lockDoerMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockDoerMockDo.Unlock()
	return mock.DoFunc(in1)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedDoer.DoCalls())
func (mock *DoerMock) DoCalls() []struct {
	In1 *http.Request
} {
	var calls []struct {
		In1 *http.Request
	}
	lockDoerMockDo.RLock()
	calls = mock.calls.Do
	lockDoerMockDo.RUnlock()
	return calls
}
